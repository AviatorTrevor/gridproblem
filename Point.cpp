#include <assert.h>
#include "Point.h"

///////////////////////////////////////////////////////////////////////////////
Point::Point(double x, double y, int id) :
  mPointId(id),
  mLeftNeighbor(nullptr),
  mTopNeighbor(nullptr),
  mRightNeighbor(nullptr),
  mBottomNeighbor(nullptr),
  mParent(nullptr),
  mLeftChild(nullptr),
  mRightChild(nullptr)
{
  mCoordinates[0] = x;
  mCoordinates[1] = y;
}

///////////////////////////////////////////////////////////////////////////////
double Point::getX()
{
  return mCoordinates[0];
}

///////////////////////////////////////////////////////////////////////////////
double Point::getY()
{
  return mCoordinates[1];
}

///////////////////////////////////////////////////////////////////////////////
double Point::getCoordinate(int index)
{
  assert (index < POINT_DIMENSIONS);
  return (mCoordinates[index]);
}

///////////////////////////////////////////////////////////////////////////////
int Point::getId()
{
  return mPointId;
}

///////////////////////////////////////////////////////////////////////////////
void Point::setLeftNeighbor(Point* point)
{
  mLeftNeighbor = point;
}

///////////////////////////////////////////////////////////////////////////////
void Point::setTopNeighbor(Point* point)
{
  mTopNeighbor = point;
}

///////////////////////////////////////////////////////////////////////////////
void Point::setRightNeighbor(Point* point)
{
  mRightNeighbor = point;
}

///////////////////////////////////////////////////////////////////////////////
void Point::setBottomNeighbor(Point* point)
{
  mBottomNeighbor = point;
}

///////////////////////////////////////////////////////////////////////////////
bool Point::hasLeftNeighbor()
{
  return mLeftNeighbor != nullptr;
}

///////////////////////////////////////////////////////////////////////////////
bool Point::hasTopNeighbor()
{
  return mTopNeighbor != nullptr;
}

///////////////////////////////////////////////////////////////////////////////
bool Point::hasRightNeighbor()
{
  return mRightNeighbor != nullptr;
}

///////////////////////////////////////////////////////////////////////////////
bool Point::hasBottomNeighbor()
{
  return mBottomNeighbor != nullptr;
}

///////////////////////////////////////////////////////////////////////////////
void Point::setParent(Point* point)
{
  mParent = point;
}

///////////////////////////////////////////////////////////////////////////////
void Point::addLeftChild(Point* point)
{
  mLeftChild = point;
  mLeftChild->setParent(this);
}

///////////////////////////////////////////////////////////////////////////////
void Point::addRightChild(Point* point)
{
  mRightChild = point;
  mRightChild->setParent(this);
}

///////////////////////////////////////////////////////////////////////////////
Point** Point::getParent()
{
  return &mParent;
}

///////////////////////////////////////////////////////////////////////////////
Point** Point::getLeftChild()
{
  return &mLeftChild;
}

///////////////////////////////////////////////////////////////////////////////
Point** Point::getRightChild()
{
  return &mRightChild;
}

///////////////////////////////////////////////////////////////////////////////
bool Point::isNull()
{
  return (this == nullptr);
}

///////////////////////////////////////////////////////////////////////////////
bool Point::isEqual(Point* p)
{
  return p == this;
}